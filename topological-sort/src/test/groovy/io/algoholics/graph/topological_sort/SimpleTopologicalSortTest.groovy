/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package io.algoholics.graph.topological_sort

import spock.lang.Specification

class SimpleTopologicalSortTest extends Specification {

    def "topological sort on a connected graph"() {
        setup:
        def sort = new SimpleTopologicalSort()
        def dag = [
                new Pair<>(5, 11),
                new Pair<>(11, 2),
                new Pair<>(7, 11),
                new Pair<>(7, 8),
                new Pair<>(8, 9),
                new Pair<>(3, 8),
                new Pair<>(3, 10),
                new Pair<>(11, 9),
                new Pair<>(11, 10)]

        when:
        def sorted = sort.sort(dag)

        then:
        sort.isTopologicalSort(dag, sorted)

        when:
        def sortedWrong = [5, 7, 11, 8, 2, 10, 9, 3]

        then:
        !sort.isTopologicalSort(dag, sortedWrong)
    }

    def "test list to map"() {
        given:
        def sort = new SimpleTopologicalSort()
        def dag = [
                new Pair<>(5, 11),
                new Pair<>(11, 2),
                new Pair<>(7, 11),
                new Pair<>(7, 8),
                new Pair<>(8, 9),
                new Pair<>(3, 8),
                new Pair<>(3, 10),
                new Pair<>(11, 9),
                new Pair<>(11, 10)]

        when:
        def graphMap = sort.listToMap(dag)

        then:
        def expectedMap = [5: [11], 11: [2, 9, 10], 7: [11, 8], 8: [9], 3: [8, 10]]
        expectedMap == graphMap
    }

    def "test get indegrees"() {
        given:
        def sort = new SimpleTopologicalSort()
        def dag = [
                new Pair<>(5, 11),
                new Pair<>(11, 2),
                new Pair<>(7, 11),
                new Pair<>(7, 8),
                new Pair<>(8, 9),
                new Pair<>(3, 8),
                new Pair<>(3, 10),
                new Pair<>(11, 9),
                new Pair<>(11, 10)]

        when:
        def indegrees = sort.getIndegrees(dag)

        then:
        def expectedIndegrees = [2: 1, 3: 0, 5: 0, 7: 0, 8: 2, 9: 2, 10: 2, 11: 2]
        expectedIndegrees == indegrees

        when:
        def sources = sort.getSourceVertices(indegrees) as Set

        then:
        def expectedSources = [3, 5, 7] as Set
        expectedSources == sources
    }

}
