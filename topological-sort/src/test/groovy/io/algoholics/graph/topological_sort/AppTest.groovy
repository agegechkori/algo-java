/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package io.algoholics.graph.topological_sort

import spock.lang.Specification

class AppTest extends Specification {
    def "topological sort on a connected graph"() {
        setup:
        def sort = new TopologicalSort()
        def dag = new DirectedGraph<Integer>()
        dag.addEdge(5, 11)
        dag.addEdge(11, 2)
        dag.addEdge(7, 11)
        dag.addEdge(7, 8)
        dag.addEdge(8, 9)
        dag.addEdge(3, 8)
        dag.addEdge(3, 10)
        dag.addEdge(11, 9)
        dag.addEdge(11, 10)

        when:
        def sorted = sort.sort(dag)

        then:
        sort.isTopologicalSort(dag, sorted) == true

        when:
        def sortedWrong = [5, 7, 11, 8, 2, 10, 9, 3]

        then:
        sort.isTopologicalSort(dag, sortedWrong) == false
    }

    def "is topological sort"() {
        setup:
        def sort = new TopologicalSort()
        def dag = new DirectedGraph<Integer>()
        dag.addEdge(1, 2)
        dag.addEdge(2, 3)
        dag.addEdge(3, 4)

        when:
        def sorted = [1, 2, 3, 4]

        then:
        sort.isTopologicalSort(dag, sorted) == true

        when:
        def sortedEx1 = [1, 2, 3, 4, 4]
        sort.isTopologicalSort(dag, sortedEx1)

        then:
        thrown(IllegalArgumentException)

        when:
        def sortedEx2 = [1, 2, 3, 5]
        sort.isTopologicalSort(dag, sortedEx2)

        then:
        thrown(IllegalArgumentException)

        when:
        def sortedFalse = [1, 2, 4, 3]

        then:
        sort.isTopologicalSort(dag, sortedFalse) == false
    }

}
