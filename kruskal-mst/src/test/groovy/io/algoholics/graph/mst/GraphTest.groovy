/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package io.algoholics.graph.mst

import spock.lang.Specification

class GraphTest extends Specification {

    def "test empty graph"() {
        given:
        def graph = new Graph()

        expect:
        graph.getEdges().isEmpty()
        graph.getVertices().isEmpty()
    }

    def "test simple graph"() {
        given:
        def graph = new Graph()

        when:
        graph.addEdge(new Edge(1, 2, 4.56))

        then:
        graph.getEdges().size() == 1
        graph.getVertices().size() == 2

        when:
        graph.addEdge(new Edge(2, 2, 3.76))

        then:
        graph.getEdges().size() == 2
        graph.getVertices().size() == 2

        when:
        graph.addEdge(new Edge(2, 3, 6.11))
        graph.addEdge(new Edge(3, 1, 3.14))

        then:
        new HashSet<>(graph.getEdges()) == Set.of(new Edge(1, 2, 4.56)
                                                , new Edge(2, 2, 3.76)
                                                , new Edge(2, 3, 6.11)
                                                , new Edge(3, 1, 3.14))
        new HashSet<>(graph.getVertices()) == Set.of(1, 2, 3)

        when:
        def result = graph.getEdges(1)

        then:
        new HashSet<>(result) == Set.of(new Edge(1, 2, 4.56), new Edge(3, 1, 3.14))
    }
}
