/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package io.algoholics.graph.mst

import spock.lang.Specification

class DisjointSetTest extends Specification {
    def uf = new DisjointSet([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    def oldCount = uf.getCount()

    def "test simple find"() {
        when:
        def result = uf.find(3)

        then:
        result == 3
    }

    def "test simple union"() {
        when:
        def result = uf.union(0, 1)

        then:
        result
        uf.connected(0, 1)
        uf.getCount() == oldCount - 1

        expect:
        !uf.union(0, 1)
    }

    def "test several unions"() {
        when:
        uf.union(0, 1)
        uf.union(1, 5)

        then:
        uf.getCount() == oldCount - 2
        uf.connected(1, 5)
        uf.connected(0, 5)
        uf.connected(0, 1)
        !uf.connected(0, 6)
    }

    def "test find non-existing"() {
        when:
        def result = uf.find(11)

        then:
        result == 11
        uf.getCount() == oldCount + 1
        !uf.connected(0, 11)
    }

    def "test union two non-existing"() {
        when:
        uf.union(10, 11)

        then:
        uf.getCount() == oldCount + 1
    }

    def "test union existing and non-existing"() {
        when:
        uf.union(0, 10)

        then:
        uf.getCount() == oldCount
    }

    def "test connected to self"() {
        when:
        def result = uf.connected(1, 1)

        then:
        result
    }

    def "test union to self"() {
        when:
        uf.union(1 ,1)

        then:
        uf.getCount() == oldCount
    }

    def "test find on empty set"() {
        setup:
        def theUf = new DisjointSet()

        when:
        def result = theUf.find(0)

        then:
        result == 0
        theUf.getCount() == 1

        when:
        result = theUf.find(1)

        then:
        result == 1
        theUf.getCount() == 2

        when:
        result = theUf.find(2)

        then:
        result == 2
        theUf.getCount() == 3

        when:
        theUf.union(0, 1)

        then:
        theUf.connected(0, 1)
        !theUf.connected(0, 2)
        !theUf.connected(1, 2)
        theUf.getCount() == 2

        when:
        theUf.union(1, 2)

        then:
        theUf.connected(0, 1)
        theUf.connected(0, 2)
        theUf.connected(1, 2)
        theUf.getCount() == 1
    }
}
